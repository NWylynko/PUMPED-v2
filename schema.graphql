
# this is purely a schema, no queries or mutations

type Brand {
  brandId: ID!
  name: String!
  website: String
  icon: String
  shoes: [Shoe] @hasInverse(field: brand)
}

type Collection {
  collectionId: ID!
  name: String!
  shoes: [Shoe] @hasInverse(field: collection)
}

type Colour {
  colourId: ID!
  shoe: Shoe!
  name: String!
  hex: String!
  image: Image!
}

type Customer {
  customerId: String! @id
  email: String! @id
  name: String!
  picture: String
  orders: [Order] @hasInverse(field: customer)
  reviews: [Review] @hasInverse(field: customer)
  wishlist: [WishList] @hasInverse(field: customer)
}

type Image {
  imageId: ID!
  name: String!
}

type Order {
  orderId: ID!
  customer: Customer!
  dateOfPurchase: DateTime
  paid: Boolean!
  total: Int
  deliveryAddress: String
  activeCart: Boolean! @search
  items: [OrderItem] @hasInverse(field: order)
}

type OrderItem {
  orderItemId: ID!
  order: Order!
  shoe: Shoe!
  stock: Stock!
  quantity: Int!
  price: Int
}

type Review {
  reviewId: ID!
  shoe: Shoe!
  customer: Customer!
  stars: Int!
  message: String
  timestamp: DateTime!
}

type Section {
  sectionId: ID!
  name: String!
}

type Shoe {
  shoeId: ID!
  name: String!
  description: String!
  price: Int!
  releaseDate: DateTime!
  stars: Int
  brand: Brand!
  style: Style!
  section: Section!
  collection: Collection!
  coverImage: Image!
  colours: [Colour] @hasInverse(field: shoe)
  tags: [Tag] @hasInverse(field: shoe)
  reviews: [Review] @hasInverse(field: shoe)
  stock: [Stock] @hasInverse(field: shoe)
}

type Stock {
  stockId: ID!
  shoe: Shoe!
  colour: Colour!
  size: Int!
  quantity: Int!
}

type Style {
  styleId: ID!
  name: String!
}

type Tag {
  tagId: ID!
  shoe: Shoe!
  tag: String!
}

type WishList {
  wishListId: ID!
  customer: Customer!
  shoe: Shoe!
}
